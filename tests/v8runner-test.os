#Использовать ".."

Перем юТест;
Перем УправлениеКонфигуратором;

Процедура Инициализация()
	
	УправлениеКонфигуратором = Новый УправлениеКонфигуратором;
	Лог = Логирование.ПолучитьЛог("oscript.lib.v8runner");
	Лог.УстановитьУровень(УровниЛога.Отладка);

КонецПроцедуры

Функция ПолучитьСписокТестов(Тестирование) Экспорт
	
	юТест = Тестирование;
	
	СписокТестов = Новый Массив;
	СписокТестов.Добавить("ТестДолжен_ИзменитьКаталогСборки");
	СписокТестов.Добавить("ТестДолжен_СоздатьВременнуюБазу");
	СписокТестов.Добавить("ТестДолжен_ПроверитьНазначениеПутиКПлатформе");
	СписокТестов.Добавить("ТестДолжен_ПроверитьУстановкуЯзыкаИнтерфейса");
	СписокТестов.Добавить("ТестДолжен_СоздатьХранилищеКонфигурации");
	СписокТестов.Добавить("ТестДолжен_ПроверитьСозданиеФайловПоставки");
	
	Возврат СписокТестов;
	
КонецФункции

Процедура ТестДолжен_ИзменитьКаталогСборки() Экспорт
	
	ПоУмолчанию = ТекущийКаталог();
	юТест.ПроверитьРавенство(УправлениеКонфигуратором.КаталогСборки(), ПоУмолчанию, "По умолчанию каталог сборки должен совпадать с текущим каталогом");
	
	СтароеЗначение = УправлениеКонфигуратором.КаталогСборки(КаталогВременныхФайлов());
	юТест.ПроверитьРавенство(СтароеЗначение, ПоУмолчанию, "Предыдущее значение каталога должно возвращяться при его смене");
	юТест.ПроверитьРавенство(УправлениеКонфигуратором.КаталогСборки(), КаталогВременныхФайлов(), "Каталог сборки должен быть изменен");
	
КонецПроцедуры

Процедура ТестДолжен_СоздатьВременнуюБазу() Экспорт
	
	Если УправлениеКонфигуратором.ВременнаяБазаСуществует() Тогда
		УдалитьФайлы(УправлениеКонфигуратором.ПутьКВременнойБазе());
	КонецЕсли;
	
	юТест.ПроверитьЛожь(УправлениеКонфигуратором.ВременнаяБазаСуществует(), "Временной базы не должно быть в каталоге <"+УправлениеКонфигуратором.ПутьКВременнойБазе()+">");
	УправлениеКонфигуратором.СоздатьФайловуюБазу(УправлениеКонфигуратором.ПутьКВременнойБазе());
	Сообщить(УправлениеКонфигуратором.ВыводКоманды());
	юТест.ПроверитьИстину(УправлениеКонфигуратором.ВременнаяБазаСуществует(), "Временная база должна существовать");
	УдалитьФайлы(УправлениеКонфигуратором.ПутьКВременнойБазе());
	
КонецПроцедуры


Процедура ТестДолжен_СоздатьХранилищеКонфигурации() Экспорт
	
	КаталогВремененногоХранилища = ОбъединитьПути(КаталогВременныхФайлов(), "v8r_TempRepository");

	Сообщить(КаталогВремененногоХранилища);
	ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1Cv8.cf");

	СтароеЗначение = УправлениеКонфигуратором.КаталогСборки(КаталогВременныхФайлов());
	
	Если УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища) Тогда
		УдалитьФайлы(КаталогВремененногоХранилища);
	КонецЕсли;	
	юТест.ПроверитьЛожь(УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища), 
				"Временного хранилища конфигурации не должно быть в каталоге <"+КаталогВремененногоХранилища+">");

	
	УправлениеКонфигуратором.СоздатьХранилищеКонфигурации(
									ФайлКонфигурации,
									КаталогВремененногоХранилища,
									"Администратор");
	Сообщить(УправлениеКонфигуратором.ВыводКоманды());
	юТест.ПроверитьИстину(УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища), "Временное хранилище конфигурации должно существовать");
	УдалитьФайлы(КаталогВременныхФайлов());
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьСозданиеФайловПоставки() Экспорт
	
	КаталогВремененногоХранилища = ОбъединитьПути(КаталогВременныхФайлов(), "v8r_TempRepository");
	КаталогПоставки = ОбъединитьПути(КаталогВременныхФайлов(), "v8r_TempDitr");

	Сообщить(КаталогПоставки);
	ФайлКонфигурации = ОбъединитьПути(ТекущийСценарий().Каталог, "fixtures", "1Cv8.cf");

	СтароеЗначение = УправлениеКонфигуратором.КаталогСборки(КаталогВременныхФайлов());
	
	Если УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища) Тогда
		УдалитьФайлы(КаталогВремененногоХранилища);
	КонецЕсли;	
	юТест.ПроверитьЛожь(УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища), 
				"Временного хранилища конфигурации не должно быть в каталоге <"+КаталогВремененногоХранилища+">");

	
	УправлениеКонфигуратором.СоздатьХранилищеКонфигурации(
									ФайлКонфигурации,
									КаталогВремененногоХранилища,
									"Администратор");
	Сообщить(УправлениеКонфигуратором.ВыводКоманды());
	юТест.ПроверитьИстину(УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища), "Временное хранилище конфигурации должно существовать");
	
	УправлениеКонфигуратором.СоздатьФайлыПоставкиВерсииИзХранилища(
											КаталогПоставки, 
											"1.0", 
											КаталогВремененногоХранилища, 
											"Администратор", 
											);
	юТест.ПроверитьИстину(УправлениеКонфигуратором.ХранилищеКонфигурацииСуществует(КаталогВремененногоХранилища), "Временное хранилище конфигурации должно существовать");
	
	
	
	УдалитьФайлы(КаталогВременныхФайлов());
	
КонецПроцедуры




Процедура ТестДолжен_ПроверитьНазначениеПутиКПлатформе() Экспорт
	
	ПутьПоУмолчанию = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы("8.3");
	юТест.ПроверитьЛожь(ПустаяСтрока(ПутьПоУмолчанию));
	юТест.ПроверитьРавенство(ПутьПоУмолчанию, УправлениеКонфигуратором.ПутьКПлатформе1С());
	
	НовыйПуть = "тратата";
	Попытка
		УправлениеКонфигуратором.ПутьКПлатформе1С(НовыйПуть);
	Исключение
		Возврат;
	КонецПопытки;
	
	ВызватьИсключение "Не было выброшено исключение при попытке установить неверный путь";
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьУстановкуЯзыкаИнтерфейса() Экспорт
	
	ПоУмолчанию = "en";
	УправлениеКонфигуратором.УстановитьКодЯзыка(ПоУмолчанию);
	
	МассивПараметров = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	юТест.ПроверитьБольшеИлиРавно(МассивПараметров.Найти("/L"+ПоУмолчанию), 0, "Массив параметров запуска должен содержать локализацию  /L"+ПоУмолчанию + " строка:"+Строка(МассивПараметров));
	юТест.ПроверитьБольшеИлиРавно(МассивПараметров.Найти("/VL"+ПоУмолчанию), 0, "Массив запуска должен содержать локализацию сеанаса /VL"+ПоУмолчанию + " строка:"+Строка(МассивПараметров));
	
КонецПроцедуры



//////////////////////////////////////////////////////////////////////////////////////
// Инициализация

Инициализация();